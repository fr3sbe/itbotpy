import os
import json
import random
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s [%(levelname)s]: %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN!')
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
application = Application.builder().token(BOT_TOKEN).build()

# –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–µ
tips = {
    'js': [
        "https://t.me/zametkyIT/159",
        "https://t.me/zametkyIT/125",
        "https://t.me/zametkyIT/220",
        "https://t.me/zametkyIT/225",
        "https://t.me/zametkyIT/150",
        "https://t.me/zametkyIT/114"
    ],
    'python': [
        "https://t.me/zametkyIT/159",
        "https://t.me/zametkyIT/125",
        "https://t.me/zametkyIT/220",
    ],
    'web': [
        "https://t.me/zametkyIT/159",
        "https://t.me/zametkyIT/148",
        "https://t.me/zametkyIT/225",
        "https://t.me/zametkyIT/220",
        "https://t.me/zametkyIT/163",
        "https://t.me/zametkyIT/150"
    ],
    'hacking': [
        "https://t.me/zametkyIT/181",
        "https://t.me/zametkyIT/226",
        "https://t.me/zametkyIT/220",
        "https://t.me/zametkyIT/202",
        "https://t.me/zametkyIT/201",
        "https://t.me/zametkyIT/128",
        "https://t.me/zametkyIT/232"
    ]
}

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —è–∑—ã–∫"
code_snippets = [
    {
        'snippet': "```\nfor (let i = 0; i < 5; i++) {\n    console.log(i);\n}\n```",
        'options': [
            {'text': "JavaScript", 'id': "js"},
            {'text': "Python", 'id': "py"},
            {'text': "C++", 'id': "cpp"}
        ],
        'correct': "js",
        'explanation': "–≠—Ç–æ —Ü–∏–∫–ª `for` –≤ JavaScript —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º `let` –∏ `console.log`."
    },
    {
        'snippet': "```\nfor i in range(5):\n    print(i)\n```",
        'options': [
            {'text': "JavaScript", 'id': "js"},
            {'text': "Python", 'id': "py"},
            {'text': "Ruby", 'id': "rb"}
        ],
        'correct': "py",
        'explanation': "–≠—Ç–æ —Ü–∏–∫–ª `for` –≤ Python —Å `range()` –∏ `print()`."
    },
    {
        'snippet': "```\n#include <iostream>\nint main() {\n    std::cout << \"Hello\";\n    return 0;\n}\n```",
        'options': [
            {'text': "C++", 'id': "cpp"},
            {'text': "Java", 'id': "java"},
            {'text': "C#", 'id': "cs"}
        ],
        'correct': "cpp",
        'explanation': "–≠—Ç–æ –∫–æ–¥ –Ω–∞ C++ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º `iostream` –∏ `std::cout`."
    },
    {
        'snippet': "```\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello\");\n    }\n}\n```",
        'options': [
            {'text': "Python", 'id': "py"},
            {'text': "Java", 'id': "java"},
            {'text': "JavaScript", 'id': "js"}
        ],
        'correct': "java",
        'explanation': "–≠—Ç–æ –∫–æ–¥ –Ω–∞ Java —Å –∫–ª–∞—Å—Å–æ–º –∏ –º–µ—Ç–æ–¥–æ–º `main`."
    }
]

# –°–Ω–∏–ø–ø–µ—Ç—ã –¥–ª—è –∏–≥—Ä—ã "–°–æ–±–µ—Ä–∏ –∫–æ–¥"
assemble_snippets = [
    {
        'parts': [
            "for i in range(3):",
            "    print(i)",
            "print(\"Done\")"
        ],
        'correct_order': [0, 1, 2],
        'explanation': "–≠—Ç–æ —Ü–∏–∫–ª –≤ Python, –≥–¥–µ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—ë—Ç—Å—è —Ü–∏–∫–ª `for`, –∑–∞—Ç–µ–º –µ–≥–æ —Ç–µ–ª–æ —Å `print(i)`, –∏ –≤ –∫–æ–Ω—Ü–µ `print(\"Done\")`."
    },
    {
        'parts': [
            "function sayHello() {",
            "    console.log(\"Hello!\");",
            "}",
            "sayHello();"
        ],
        'correct_order': [0, 1, 2, 3],
        'explanation': "–≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤ JavaScript: —Å–Ω–∞—á–∞–ª–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∑–∞—Ç–µ–º –µ—ë —Ç–µ–ª–æ, –∑–∞–∫—Ä—ã—Ç–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—ã–∑–æ–≤ `sayHello()`."
    }
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_state = {}
user_favorites = {}
user_favorites_state = {}
user_game_state = {}
user_assemble_state = {}
user_theme = {}

favorites_file = 'favorites.json'
themes_file = 'themes.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤
if os.path.exists(favorites_file):
    with open(favorites_file, 'r', encoding='utf-8') as f:
        user_favorites = json.load(f)

if os.path.exists(themes_file):
    with open(themes_file, 'r', encoding='utf-8') as f:
        user_theme.update(json.load(f))

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def save_favorites():
    with open(favorites_file, 'w', encoding='utf-8') as f:
        json.dump(user_favorites, f, ensure_ascii=False, indent=2)

def save_themes():
    with open(themes_file, 'w', encoding='utf-8') as f:
        json.dump(user_theme, f, ensure_ascii=False, indent=2)

# –†–∞–±–æ—Ç–∞ —Å —Ç–µ–º–∞–º–∏
def get_user_theme(user_id):
    return user_theme.get(str(user_id), 'light')

def set_user_theme(user_id, theme):
    user_theme[str(user_id)] = 'dark' if theme == 'dark' else 'light'
    save_themes()

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ
async def start(update, context):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}')
    user_id = update.message.from_user.id
    theme = get_user_theme(user_id)
    theme_emoji = 'üåô' if theme == 'dark' else '‚òÄÔ∏è'
    logger.info(f'–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {theme}')

    # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ
    photo_path = 'baby.jpeg'  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–∞–∫ –∏ –ª–µ–∂–∏—Ç –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
    if os.path.exists(photo_path):
        try:
            with open(photo_path, 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=photo,
                    caption=f'{theme_emoji} –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–∞–Ω–∞–ª–∞ @ZametkyIT! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:'
                )
            logger.info(f'–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}')
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}')
            await update.message.reply_text(f'{theme_emoji} –ü—Ä–∏–≤–µ—Ç! –§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –Ω–æ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:')
    else:
        logger.warning(f'–§–æ—Ç–æ {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        await update.message.reply_text(f'{theme_emoji} –ü—Ä–∏–≤–µ—Ç! –§–æ—Ç–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:')

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("JavaScript", callback_data='js')],
        [InlineKeyboardButton("Python", callback_data='python')],
        [InlineKeyboardButton("Hacking", callback_data='hacking')],
        [InlineKeyboardButton("Web", callback_data='web')],
        [InlineKeyboardButton("üìå –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='show_favorites'),
         InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º", callback_data='random_tip')],
        [InlineKeyboardButton("üéÆ –£–≥–∞–¥–∞–π —è–∑—ã–∫", callback_data='start_game'),
         InlineKeyboardButton("üß© –°–æ–±–µ—Ä–∏ –∫–æ–¥", callback_data='start_assemble')],
        [InlineKeyboardButton("üé® –¢–µ–º–∞", callback_data='theme')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f'{theme_emoji} –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
    logger.info(f'–ú–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}')

# –ö–æ–º–∞–Ω–¥–∞ /theme
async def theme_command(update, context):
    user_id = update.message.from_user.id
    current_theme = get_user_theme(user_id)
    theme_emoji = 'üåô' if current_theme == 'dark' else '‚òÄÔ∏è'
    
    keyboard = [
        [InlineKeyboardButton("‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è", callback_data='set_theme_light'),
         InlineKeyboardButton("üåô –¢—ë–º–Ω–∞—è", callback_data='set_theme_dark')],
        [InlineKeyboardButton("üè†", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f'{theme_emoji} üé® –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {"üåô –¢—ë–º–Ω–∞—è" if current_theme == "dark" else "‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è"}\n–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:',
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_callback(update, context):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    theme = get_user_theme(user_id)
    theme_emoji = 'üåô' if theme == 'dark' else '‚òÄÔ∏è'

    try:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é
        if data == 'back_to_menu':
            photo_path = 'photo.jpg'  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–∞–∫
            if os.path.exists(photo_path):
                try:
                    with open(photo_path, 'rb') as photo:
                        await context.bot.send_photo(
                            chat_id=query.message.chat_id,
                            photo=photo,
                            caption=f'{theme_emoji} –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–∞–Ω–∞–ª–∞ @ZametkyIT! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:'
                        )
                except Exception as e:
                    logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}')
            else:
                await query.message.reply_text(f'{theme_emoji} –ü—Ä–∏–≤–µ—Ç! –§–æ—Ç–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')

            keyboard = [
                [InlineKeyboardButton("JavaScript", callback_data='js')],
                [InlineKeyboardButton("Python", callback_data='python')],
                [InlineKeyboardButton("Hacking", callback_data='hacking')],
                [InlineKeyboardButton("Web", callback_data='web')],
                [InlineKeyboardButton("üìå –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='show_favorites'),
                 InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º", callback_data='random_tip')],
                [InlineKeyboardButton("üéÆ –£–≥–∞–¥–∞–π —è–∑—ã–∫", callback_data='start_game'),
                 InlineKeyboardButton("üß© –°–æ–±–µ—Ä–∏ –∫–æ–¥", callback_data='start_assemble')],
                [InlineKeyboardButton("üé® –¢–µ–º–∞", callback_data='theme')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(f'{theme_emoji} –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
            await query.answer()

        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–∞–π—Ñ—Ö–∞–∫–æ–≤
        elif data in ['js', 'python', 'hacking', 'web']:
            category = data
            all_tips = tips[category]
            if not all_tips:
                await query.message.reply_text('–ü–æ–∫–∞ –Ω–µ—Ç –ª–∞–π—Ñ—Ö–∞–∫–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!')
                await query.answer()
                return

            user_state[user_id] = {'category': category, 'index': 0, 'used_tips': []}
            tip = all_tips[0]
            user_state[user_id]['used_tips'].append(tip)
            
            prev_emoji = 'üåë' if theme == 'dark' else '‚¨ÖÔ∏è'
            next_emoji = 'üåë' if theme == 'dark' else '‚û°Ô∏è'
            keyboard = [
                [InlineKeyboardButton(prev_emoji, callback_data='prev'),
                 InlineKeyboardButton(next_emoji, callback_data='next')],
                [InlineKeyboardButton('‚ù§Ô∏è', callback_data=f'favorite_{tip}'),
                 InlineKeyboardButton('üìå', callback_data='show_favorites')],
                [InlineKeyboardButton('üè†', callback_data='back_to_menu')]
            ]
            await query.message.reply_text(tip, reply_markup=InlineKeyboardMarkup(keyboard))
            await query.answer()

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ª–∞–π—Ñ—Ö–∞–∫–∞–º
        elif data in ['next', 'prev']:
            if user_id not in user_state:
                await query.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!')
                await query.answer()
                return

            state = user_state[user_id]
            all_tips = tips[state['category']]
            available_tips = [t for t in all_tips if t not in state['used_tips']]
            new_index = state['index'] + (1 if data == 'next' else -1)

            if data == 'next' and available_tips:
                next_tip = available_tips[0]
                state['used_tips'].append(next_tip)
                new_index = all_tips.index(next_tip)
            elif new_index < 0:
                new_index = 0
            elif new_index >= len(all_tips):
                new_index = len(all_tips) - 1

            state['index'] = new_index
            current_tip = all_tips[new_index]
            
            prev_emoji = 'üåë' if theme == 'dark' else '‚¨ÖÔ∏è'
            next_emoji = 'üåë' if theme == 'dark' else '‚û°Ô∏è'
            keyboard = [
                [InlineKeyboardButton(prev_emoji, callback_data='prev'),
                 InlineKeyboardButton(next_emoji, callback_data='next')],
                [InlineKeyboardButton('‚ù§Ô∏è', callback_data=f'favorite_{current_tip}'),
                 InlineKeyboardButton('üìå', callback_data='show_favorites')],
                [InlineKeyboardButton('üè†', callback_data='back_to_menu')]
            ]
            await query.message.edit_text(current_tip, reply_markup=InlineKeyboardMarkup(keyboard))
            await query.answer()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        elif data.startswith('favorite_'):
            tip = data.replace('favorite_', '')
            if user_id not in user_favorites:
                user_favorites[user_id] = []
            if tip not in user_favorites[user_id]:
                user_favorites[user_id].append(tip)
                save_favorites()
                await query.answer('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! ‚ù§Ô∏è')
            else:
                await query.answer('–£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!')

        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        elif data == 'show_favorites':
            favorites = user_favorites.get(user_id, [])
            if not favorites:
                await query.message.reply_text('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ª–∞–π—Ñ—Ö–∞–∫–æ–≤!')
            else:
                page_size = 5
                user_favorites_state[user_id] = user_favorites_state.get(user_id, {'page': 0})
                page = user_favorites_state[user_id]['page']
                start = page * page_size
                end = start + page_size
                paginated_favorites = favorites[start:end]
                total_pages = (len(favorites) + page_size - 1) // page_size

                prev_emoji = 'üåë –ü—Ä–µ–¥.' if theme == 'dark' else '‚¨ÖÔ∏è –ü—Ä–µ–¥.'
                next_emoji = 'üåë –°–ª–µ–¥.' if theme == 'dark' else '‚û°Ô∏è –°–ª–µ–¥.'
                keyboard = [
                    [InlineKeyboardButton(prev_emoji, callback_data='fav_prev_page'),
                     InlineKeyboardButton(next_emoji, callback_data='fav_next_page')],
                    [InlineKeyboardButton('üè†', callback_data='back_to_menu')]
                ]
                await query.message.reply_text(
                    f'{theme_emoji} –ò–∑–±—Ä–∞–Ω–Ω–æ–µ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):\n' + '\n'.join(paginated_favorites),
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            await query.answer()

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        elif data in ['fav_next_page', 'fav_prev_page']:
            favorites = user_favorites.get(user_id, [])
            if not favorites:
                await query.message.reply_text('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ª–∞–π—Ñ—Ö–∞–∫–æ–≤!')
                await query.answer()
                return

            page_size = 5
            user_favorites_state[user_id] = user_favorites_state.get(user_id, {'page': 0})
            page = user_favorites_state[user_id]['page']
            total_pages = (len(favorites) + page_size - 1) // page_size
            page += 1 if data == 'fav_next_page' else -1

            if page < 0 or page >= total_pages:
                await query.answer()
                return

            user_favorites_state[user_id]['page'] = page
            start = page * page_size
            end = start + page_size
            paginated_favorites = favorites[start:end]

            prev_emoji = 'üåë –ü—Ä–µ–¥.' if theme == 'dark' else '‚¨ÖÔ∏è –ü—Ä–µ–¥.'
            next_emoji = 'üåë –°–ª–µ–¥.' if theme == 'dark' else '‚û°Ô∏è –°–ª–µ–¥.'
            keyboard = [
                [InlineKeyboardButton(prev_emoji, callback_data='fav_prev_page'),
                 InlineKeyboardButton(next_emoji, callback_data='fav_next_page')],
                [InlineKeyboardButton('üè†', callback_data='back_to_menu')]
            ]
            await query.message.edit_text(
                f'{theme_emoji} –ò–∑–±—Ä–∞–Ω–Ω–æ–µ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):\n' + '\n'.join(paginated_favorites),
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            await query.answer()

        # –°–ª—É—á–∞–π–Ω—ã–π –ª–∞–π—Ñ—Ö–∞–∫
        elif data == 'random_tip':
            all_tips = [tip for sublist in tips.values() for tip in sublist]
            random_tip = random.choice(all_tips)
            keyboard = [
                [InlineKeyboardButton('‚ù§Ô∏è', callback_data=f'favorite_{random_tip}')],
                [InlineKeyboardButton('üè†', callback_data='back_to_menu')]
            ]
            await query.message.reply_text(f'{theme_emoji} {random_tip}', reply_markup=InlineKeyboardMarkup(keyboard))
            await query.answer()

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã
        elif data in ['set_theme_light', 'set_theme_dark']:
            new_theme = 'dark' if data == 'set_theme_dark' else 'light'
            set_user_theme(user_id, new_theme)
            new_theme_emoji = 'üåô' if new_theme == 'dark' else '‚òÄÔ∏è'
            keyboard = [
                [InlineKeyboardButton("‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è", callback_data='set_theme_light'),
                 InlineKeyboardButton("üåô –¢—ë–º–Ω–∞—è", callback_data='set_theme_dark')],
                [InlineKeyboardButton("üè†", callback_data='back_to_menu')]
            ]
            await query.message.edit_text(
                f'{new_theme_emoji} üé® –¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {"üåô –¢—ë–º–Ω–∞—è" if new_theme == "dark" else "‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è"}\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –∫ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º!',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            await query.answer('–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!')

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}')
        await query.message.reply_text('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!')
        await query.answer()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler('start', start))
application.add_handler(CommandHandler('theme', theme_command))
application.add_handler(CallbackQueryHandler(handle_callback))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    application.run_webhook(
        listen='0.0.0.0',
        port=8443,
        url_path=BOT_TOKEN,
       webhook_url=f'https://99f0-138-124-123-12.ngrok-free.app/{BOT_TOKEN}'
    )

    

